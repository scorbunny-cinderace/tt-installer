name: Build and Test Installer

on:
  push:
    branches: [ main ]
    tags: ['v*']
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build installer
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set version variables
        id: version
        run: |
          # Extract version with 'v' prefix for GitHub paths
          TAG_VERSION=${{ github.ref_name }}
          # Extract version without the 'v' prefix for script
          CLEAN_VERSION=$(echo $TAG_VERSION | sed 's/^v//')

          echo "tag_version=$TAG_VERSION" >> $GITHUB_OUTPUT
          echo "clean_version=$CLEAN_VERSION" >> $GITHUB_OUTPUT

      - name: Set version in install.m4
        run: |
          # Replace the placeholder with actual version
          # Use | as a delimited because / can sometimes show up in the input
          sed -i "s|__INSTALLER_DEVELOPMENT_BUILD__|${{ steps.version.outputs.clean_version }}|g" install.m4
          # Display the change for verification in workflow logs
          echo "Updated install.m4 with version ${{ steps.version.outputs.clean_version }}"

      - name: Generate install.sh from install.m4
        run: |
          docker run --rm \
            -e PROGRAM=argbash \
            -v "$(pwd):/work" \
            -u "$(id -u):$(id -g)" \
            matejak/argbash \
            install.m4 -o install.sh

      - name: Upload install.sh as artifact
        uses: actions/upload-artifact@v4
        with:
          name: install-script
          path: install.sh

  test-debian-ubuntu:
    name: Test Debian/Ubuntu
    needs: build
    uses: ./.github/workflows/test-debian-ubuntu.yml
    with:
      artifact_name: install-script

  test-openkylin:
    name: Test openKylin
    needs: build
    uses: ./.github/workflows/test-openkylin.yml
    with:
      artifact_name: install-script

  test-fedora:
    name: Test Fedora
    needs: build
    uses: ./.github/workflows/test-fedora.yml
    with:
      artifact_name: install-script

  test-hosted-n150:
    name: Test Hosted N150
    needs: build
    uses: ./.github/workflows/test-hosted-n150.yml
    with:
      artifact_name: install-script

  test-template-syntax:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Test template syntax
      run: |
        shellcheck install.m4
        echo "âœ“ Template syntax is valid"

  test-script-syntax:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download install.sh
      uses: actions/download-artifact@v4
      with:
        name: install-script

    - name: Test script syntax
      # If this fails, we should be warned but not stop entirely
      continue-on-error: true
      run: |
        shellcheck install.sh
        echo "âœ“ Script syntax is valid"

  test-environment-variables:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download install.sh
      uses: actions/download-artifact@v4
      with:
        name: install-script

    - name: Test environment variable parsing
      run: |
        # Test that all documented environment variables are recognized
        export TT_SKIP_INSTALL_KMD=0
        export TT_SKIP_INSTALL_HUGEPAGES=0
        export TT_SKIP_UPDATE_FIRMWARE=0
        export TT_SKIP_INSTALL_PODMAN=0
        export TT_SKIP_INSTALL_METALIUM_CONTAINER=0
        export TT_SKIP_INSTALL_SFPI=0
        export TT_PYTHON_CHOICE=3
        export TT_REBOOT_OPTION=2
        export TT_MODE_CONTAINER=0
        export TT_MODE_NON_INTERACTIVE=0
        export TT_NEW_VENV_LOCATION=/tmp/test-venv
        export TT_METALIUM_IMAGE_URL=test.example.com/image
        export TT_METALIUM_IMAGE_TAG=test-tag


        # Dry run to check variable parsing
        timeout 30 bash install.sh 2>&1 | head -20 || true

        echo "âœ“ Environment variables are properly recognized"

  test-version-fetching:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download install.sh
      uses: actions/download-artifact@v4
      with:
        name: install-script

    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y jq

    - name: Test version fetching functions
      run: |
        # Source the script to test the version fetching function
        set +e  # Don't exit on function failures

        # Extract and test the generic version fetching function
        source <(grep -A 30 "fetch_latest_version()" install.sh)
        source <(grep "TT_.*_GH_REPO=" install.sh)

        echo "Testing version fetch functions..."

        # Test KMD version fetching
        if kmd_ver=$(fetch_latest_version "${TT_KMD_GH_REPO}" "ttkmd-"); then
          echo "âœ“ KMD version fetched: $kmd_ver"
        else
          echo "âš  KMD version fetch failed (may be rate limited)"
        fi

        # Test FW version fetching
        if fw_ver=$(fetch_latest_version "${TT_FW_GH_REPO}" "v"); then
          echo "âœ“ FW version fetched: $fw_ver"
        else
          echo "âš  FW version fetch failed (may be rate limited)"
        fi

        # Test system tools version fetching
        if systools_ver=$(fetch_latest_version "${TT_SYSTOOLS_GH_REPO}" "v"); then
          echo "âœ“ System tools version fetched: $systools_ver"
        else
          echo "âš  System tools version fetch failed (may be rate limited)"
        fi

        # Test SMI version fetching
        if smi_ver=$(fetch_latest_version "${TT_SMI_GH_REPO}"); then
          echo "âœ“ SMI version fetched: $smi_ver"
        else
          echo "âš  SMI version fetch failed (may be rate limited)"
        fi

        # Test Flash version fetching
        if flash_ver=$(fetch_latest_version "${TT_FLASH_GH_REPO}"); then
          echo "âœ“ Flash version fetched: $flash_ver"
        else
          echo "âš  Flash version fetch failed (may be rate limited)"
        fi

        echo "âœ“ Version fetching functions are working"

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    # Only run if the build workflow completed successfully AND it was triggered by a version tag
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build, test-debian-ubuntu, test-fedora, test-hosted-n150]

    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Checkout the tag that triggered the original workflow
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Download artifacts from build workflow
        uses: actions/download-artifact@v4
        with:
          name: install-script

      - name: Build Changelog
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          mode: "HYBRID" # Include both PRs and direct commits
          configurationJSON: |
            {
              "template": "#{{CHANGELOG}}\n\n## Contributors\n#{{CONTRIBUTORS}}\n\n## Installation\n\nInstall this version with:\n```bash\n/bin/bash -c \"$(curl -fsSL https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/install.sh)\"\n```\n\nLatest version can always be installed using:\n```bash\n/bin/bash -c \"$(curl -fsSL https://github.com/${{ github.repository }}/releases/latest/download/install.sh)\"\n```",
              "categories": [
                {
                  "title": "## ðŸ”„ Changes",
                  "labels": []
                }
              ],
              "pr_template": "- #{{TITLE}} (#{{NUMBER}}) by @#{{AUTHOR}}",
              "commit_template": "- #{{TITLE}} (#{{MERGE_SHA}}) by @#{{AUTHOR}}"
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: install.sh
          body: ${{ steps.build_changelog.outputs.changelog }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
